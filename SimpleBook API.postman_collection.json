{
	"info": {
		"_postman_id": "f932dbf3-1ec6-40c4-ab16-40d9d6ef4d0a",
		"name": "SimpleBook API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6448374"
	},
	"item": [
		{
			"name": "Get a single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a positive integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Author is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.author).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price should be a positive number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.price).to.be.a('number').above(0);\r",
							"});\r",
							"\r",
							"    const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Is in stock\", () => {\r",
							"    pm.expect(response['current-stock']).to.be.above(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/:bookId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Get a single book by bookid value exm",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 02 Jan 2024 17:40:13 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "125"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-powered-by",
							"value": "Express"
						},
						{
							"key": "etag",
							"value": "W/\"7d-g01aaT3F7gzyh+bViUA7rzYNBw0\""
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 4,\n    \"name\": \"The Midnight Library\",\n    \"author\": \"Matt Haig\",\n    \"type\": \"fiction\",\n    \"price\": 15.6,\n    \"current-stock\": 87,\n    \"available\": true\n}"
				},
				{
					"name": "Get a single book by bookid Path variable exm",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/:bookId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "2"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 02 Jan 2024 17:53:35 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "125"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-powered-by",
							"value": "Express"
						},
						{
							"key": "etag",
							"value": "W/\"7d-Ckimjt0oK2HpwoZelYONnQZ4+4w\""
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 2,\n    \"name\": \"Just as I Am\",\n    \"author\": \"Cicely Tyson\",\n    \"type\": \"non-fiction\",\n    \"price\": 20.33,\n    \"current-stock\": 0,\n    \"available\": false\n}"
				}
			]
		},
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field 'status'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status field has a value of 'OK'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.status).to.equal(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				},
				"description": "Simple Books API endpoints:\r\nhttps://github.com/vdespa/introduction-to-postman-course/blob/main/simple-books-api.md"
			},
			"response": [
				{
					"name": "API Status result",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 02 Jan 2024 16:19:28 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "15"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-powered-by",
							"value": "Express"
						},
						{
							"key": "etag",
							"value": "W/\"f-v/Y1JusChTxrQUzPtNAKycooOTA\""
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": \"OK\"\n}"
				}
			]
		},
		{
			"name": "Order a book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - created and orderId\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.created).to.exist;\r",
							"    pm.expect(responseData.orderId).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"OrderId is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.orderId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"OrderId should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Created field is a boolean\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.created).to.be.a('boolean');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				},
				"description": "Simple Books API endpoints:\r\nhttps://github.com/vdespa/introduction-to-postman-course/blob/main/simple-books-api.md"
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response includes a non-empty array of orders\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"John\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				},
				"description": "Simple Books API endpoints:\r\nhttps://github.com/vdespa/introduction-to-postman-course/blob/main/simple-books-api.md"
			},
			"response": []
		},
		{
			"name": "Get an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Customer name must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Customer name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Quantity is a positive integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.quantity).to.be.a('number');\r",
							"    pm.expect(responseData.quantity).to.be.above(0, \"Quantity should be a positive integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Timestamp is in a valid timestamp format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.timestamp).to.be.a('number');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"John\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				},
				"description": "Simple Books API endpoints:\r\nhttps://github.com/vdespa/introduction-to-postman-course/blob/main/simple-books-api.md"
			},
			"response": [
				{
					"name": "Get an order exmp",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"John\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "TAx_d4Eycj9K370g8T_or"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 02 Jan 2024 19:38:03 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "197"
						},
						{
							"key": "Connection",
							"value": "close"
						},
						{
							"key": "x-powered-by",
							"value": "Express"
						},
						{
							"key": "etag",
							"value": "W/\"c5-HBvC7rq13s8zMGe39ToE9KNQy3A\""
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"TAx_d4Eycj9K370g8T_or\",\n    \"bookId\": 1,\n    \"customerName\": \"Dr. Jeremiah Carroll\",\n    \"createdBy\": \"fe75665d5e4e5a239bc9a8a74bc73fbf466ccf4901b6a286d5794456517db5a4\",\n    \"quantity\": 1,\n    \"timestamp\": 1704223316020\n}"
				}
			]
		},
		{
			"name": "Update an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(204);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Ilanit BF2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				},
				"description": "Simple Books API endpoints:\r\nhttps://github.com/vdespa/introduction-to-postman-course/blob/main/simple-books-api.md"
			},
			"response": [
				{
					"name": "Get an order exmp",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"John\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "TAx_d4Eycj9K370g8T_or"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 02 Jan 2024 19:38:03 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "197"
						},
						{
							"key": "Connection",
							"value": "close"
						},
						{
							"key": "x-powered-by",
							"value": "Express"
						},
						{
							"key": "etag",
							"value": "W/\"c5-HBvC7rq13s8zMGe39ToE9KNQy3A\""
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"TAx_d4Eycj9K370g8T_or\",\n    \"bookId\": 1,\n    \"customerName\": \"Dr. Jeremiah Carroll\",\n    \"createdBy\": \"fe75665d5e4e5a239bc9a8a74bc73fbf466ccf4901b6a286d5794456517db5a4\",\n    \"quantity\": 1,\n    \"timestamp\": 1704223316020\n}"
				}
			]
		},
		{
			"name": "Delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains Content-Type header with value application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body has an 'error' field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Ilanit BF2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "1r6Aju_igZ8XWkyWBgBW7"
						}
					]
				},
				"description": "Simple Books API endpoints:\r\nhttps://github.com/vdespa/introduction-to-postman-course/blob/main/simple-books-api.md"
			},
			"response": [
				{
					"name": "Get an order exmp",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"John\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "TAx_d4Eycj9K370g8T_or"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 02 Jan 2024 19:38:03 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "197"
						},
						{
							"key": "Connection",
							"value": "close"
						},
						{
							"key": "x-powered-by",
							"value": "Express"
						},
						{
							"key": "etag",
							"value": "W/\"c5-HBvC7rq13s8zMGe39ToE9KNQy3A\""
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"TAx_d4Eycj9K370g8T_or\",\n    \"bookId\": 1,\n    \"customerName\": \"Dr. Jeremiah Carroll\",\n    \"createdBy\": \"fe75665d5e4e5a239bc9a8a74bc73fbf466ccf4901b6a286d5794456517db5a4\",\n    \"quantity\": 1,\n    \"timestamp\": 1704223316020\n}"
				}
			]
		},
		{
			"name": "Register API Client",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Postman\",\r\n   \"clientEmail\": \"Ilanit@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				},
				"description": "Simple Books API endpoints:\r\nhttps://github.com/vdespa/introduction-to-postman-course/blob/main/simple-books-api.md"
			},
			"response": []
		},
		{
			"name": "List of Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"const nonFictionBoos = response.filter((book) => book.available === true);\r",
							"\r",
							"const book = nonFictionBoos[0];\r",
							"\r",
							"pm.globals.set(\"bookId\", nonFictionBoos[0].id);\r",
							"\r",
							"pm.test(\"non Fiction available Book found\", () => {\r",
							"    pm.expect(book).to.be.an('object');\r",
							"    pm.expect(book.available).to.be.true;\r",
							"    pm.expect(book.type).to.eql(\"non-fiction\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array of books\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?type=non-fiction",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction",
							"disabled": true
						},
						{
							"key": "type",
							"value": "non-fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative test - wrong type param ",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?type=crime",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "crime"
						}
					]
				},
				"description": "Simple books api doc - endpoints:\r\nhttps://github.com/vdespa/introduction-to-postman-course/blob/main/simple-books-api.md\r\n\r\nOptional query parameters:\r\n\r\ntype: fiction or non-fiction\r\nUpon enter 'crime' as type, get proper error msg"
			},
			"response": []
		},
		{
			"name": "List of Books - limit param",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?limit=4",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "limit",
							"value": "4"
						},
						{
							"key": "limit",
							"value": "20",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "22",
							"disabled": true
						}
					]
				},
				"description": "List of books:\r\n\r\nGET /books\r\n\r\nReturns a list of books.\r\n\r\nOptional query parameters:\r\n\r\nlimit: a number between 1 and 20.\r\n"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		}
	]
}